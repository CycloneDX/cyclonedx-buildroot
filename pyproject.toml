[tool.poetry]
name = "CycloneDX-Buildroot"
version = "2.0.0"
description = "Create a software bill of materials from the direct dependencies of a Buildroot generated project"
authors = ["Robert Smigielski <ptdropper@gmail.com>"]
maintainers = ["Robert Smigielski <ptdropper@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/CycloneDX/cyclonedx-buildroot/#readme"
repository = "https://github.com/CycloneDX/cyclonedx-buildroot/"
# documentation = "https://cyclonedx-bom-tool.readthedocs.io/"
packages = [
    { include = "cyclonedx_buildroot" },
]
include = [
    # all is an object -> prevent parse issue with dependabot
    { path="README.md", format =["sdist"] },
    { path="tests", format=["sdist"] },
    # { path="CHANGELOG.md", format=["sdist"] },
    # { path="docs", format=["sdist"] },
]
exclude = [
    "**/.*", # exclude dotfiles and dotfolders
    "docs/_build", "docs/processes",
]
keywords = [
  "OWASP", "CycloneDX",
  "bill-of-materials", "BOM", "software-bill-of-materials","SBOM",
  "environment", "virtualenv", "venv", "Poetry", "Pipenv", "requirements", "PDM", "Conda",
  "SPDX", "licenses", "PURL", "package-url", "dependency-graph", "buildroot",
]

classifiers = [
  # Trove classifiers - https://packaging.python.org/specifications/core-metadata/#metadata-classifier
  # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Legal Industry",
  "Intended Audience :: System Administrators",
  "Topic :: Security",
  "Topic :: Software Development",
  "Topic :: System :: Software Distribution",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/CycloneDX/cyclonedx-buildroot/issues"
"Funding" = "https://owasp.org/donate/?reponame=www-project-cyclonedx&title=OWASP+CycloneDX"

[tool.poetry.scripts]
cyclonedx-buildroot = "cyclonedx_buildroot._internal.cli:run"
generateBuildrootSBOM = "cyclonedx_buildroot._internal.cli:run"  # for backwards compatibility

[tool.poetry.dependencies]
python = "^3.8"
packageurl-python = ">=0.16, <2"
cyclonedx-python-lib = "^8.5.0"
defusedxml = "^0.7.1"

[tool.poetry.group.dev.dependencies]
# pin to exact versions, if the tool/lib/plugin is process-relevant
coverage = "7.6.1"
mypy = "1.14.1"
tox = "4.25.0"
bandit = "1.7.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
# see https://python-semantic-release.readthedocs.io/en/latest/configuration.html
commit_author = "semantic-release <semantic-release@bot.local>"
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release\n\nSigned-off-by: semantic-release <semantic-release@bot.local>"
upload_to_vcs_release = true
build_command = "pip install poetry && poetry build"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
  "cyclonedx_py/__init__.py:__version__",
  "docs/conf.py:release",
]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''tests?(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
]
[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches."step"]
match = "(build|chore|ci|docs|feat|fix|perf|style|refactor|tests?)"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.branches."major-dev"]
match = "(\\d+\\.0\\.0-(dev|rc)|dev/\\d+\\.0\\.0)"
prerelease = true
prerelease_token = "rc"

