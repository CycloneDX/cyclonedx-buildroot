name: Release

on:
  workflow_dispatch:
    inputs:
      # TODO

concurrency:
  group: release
  cancel-in-progress: false  # prevent hiccups with semantic-release

env:
  DIST_DIR: dist
  DIST_ARTIFACT: python-dist
  PYTHON_VERSION_DEFAULT: "3.12"
  POETRY_VERSION: "2.1.1"

jobs:
  quicktest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v4
      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'
      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v9
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-root
      # TODO: run tests

  release-PyPI:
    outputs:
      released: ${{ steps.release.outputs.released }}   # "true" if a release was made, "false" otherwise
      version:  ${{ steps.release.outputs.version  }}   # The newly released version if one was made, otherwise the current version
      tag:      ${{ steps.release.outputs.tag      }}   # The Git tag corresponding to the version output
    needs:
      - quicktest
    runs-on: ubuntu-latest
    permissions:
      # NOTE: this enables trusted publishing.
      # See https://github.com/pypa/gh-action-pypi-publish/tree/release/v1#trusted-publishing
      # and https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'
      - name: Install and configure Poetry
        # See https://github.com/marketplace/actions/install-poetry-action
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install dependencies
        run: poetry install --no-root
      - name: View poetry version
        run: poetry --version
      # TODO: build package
      # TODO: publish package to PyPI
      # TODO: publish package GitHub releases
