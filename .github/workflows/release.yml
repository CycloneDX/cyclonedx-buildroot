name: Release

on:
  workflow_dispatch:
    inputs:
      # TODO

concurrency:
  group: release
  cancel-in-progress: false  # prevent hiccups with semantic-release

env:
  DIST_DIR: dist
  DIST_ARTIFACT: python-dist
  PYTHON_VERSION_DEFAULT: "3.12"
  POETRY_VERSION: "2.1.1"
  REPORTS_DIR: CI_reports

jobs:
  quicktest:
    name: quick test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v4
      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'
      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v9
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-root
      - name: Run tox
        run: poetry run tox run -e py -s false

  build:
    name: build
    outputs:
      version:  ${{ steps.version.outputs.version }}
      prerelease:  ${{ steps.version.outputs.prerelease }}
    needs:
      - quicktest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'
      - name: Install and configure Poetry
        # See https://github.com/marketplace/actions/install-poetry-action
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install dependencies
        run: poetry install --no-root
      - name: build package
        run: poetry build
      - name: get package version
        id: version
        run: |-
          set -eu
          PACKAGE_VERSION="$(poetry version --short)"
          echo "version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
          if [[ "$PACKAGE_VERSION" =~ (dev|a|b|rc) ]]
          then
            echo "prerelease=1" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=0" >> "$GITHUB_OUTPUT"
          fi
      - name: artifact build results
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error
          retention-days: 3

  release-PyPI:
    name: release on PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/CycloneDX-Buildroot
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download all the dists
        # see https://github.com/actions/upload-artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish package distributions to TestPyPI
        # see https://github.com/pypa/gh-action-pypi-publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
          # repository-url: https://test.pypi.org/legacy/  # uncomment to force upload to test-env
      - name: artifact release assets
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-released
          path: dist/
          if-no-files-found: error
          retention-days: 3

  release-GitHub:
    name: release on GitHub
    needs:
      - build
      - release-PyPI
    runs-on: ubuntu-latest
    env:
      TAG: v${{ needs.build.outputs.version }}
      PRERELEASE: ${{ needs.build.outputs.prerelease }}
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
      - name: Download all the release assets
        # see https://github.com/actions/upload-artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-released
          path: dist/
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |-
          set -eu
          prerelease=''
          if [[ "$PRERELEASE" == "1" ]]
          then
            prerelease='--prerelease'
          fi
          gh release create \
          --repo "$GITHUB_REPOSITORY" \
          --title "$TAG" \
          --notes "" \
          $prerelease \
          "$TAG" \
          dist/**
